import axios from 'axios';

export class DNSTest {

  axiosInstance;

  constructor(baseUrl, username, apiToken) {
    this.axiosInstance = axios.create({
      baseURL: baseUrl,
      headers: {
        'Authorization': `Bearer ${apiToken}`
      }
    });
  }

  async listRecords(domainName) {
    try {
      const response = await this.axiosInstance.get(`/v4/domains/${domainName}/records`);
      return response.data;
    } catch (error) {
      throw new Error(`Error listing records: ${error.message}`);
    }
  }

  async getRecord(domainName, recordId) {
    try {
      const response = await this.axiosInstance.get(`/v4/domains/${domainName}/records/${recordId}`);
      return response.data;
    } catch (error) {
      throw new Error(`Error getting record: ${error.message}`);
    }
  }

  async createRecord(domainName, record) {
    try {
      const response = await this.axiosInstance.post(`/v4/domains/${domainName}/records`, record);
      return response.data;
    } catch (error) {
      throw new Error(`Error creating record: ${error.message}`);
    }
  }

  async updateRecord(domainName, recordId, record) {
    try {
      const response = await this.axiosInstance.put(`/v4/domains/${domainName}/records/${recordId}`, record);
      return response.data;
    } catch (error) {
      throw new Error(`Error updating record: ${error.message}`);
    }
  }

  async deleteRecord(domainName, recordId) {
    try {
      await this.axiosInstance.delete(`/v4/domains/${domainName}/records/${recordId}`);
    } catch (error) {
      throw new Error(`Error deleting record: ${error.message}`);
    }
  }
}
